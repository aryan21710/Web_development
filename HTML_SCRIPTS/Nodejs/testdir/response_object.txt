ServerResponse {
  domain: null,
  _events: { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: 
         [ { [Function: bound onceWrapper] listener: [Function: onend] },
           [Function: bound socketOnEnd] ],
        _socketEnd: [Function: onSocketEnd],
        drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [ [Function: bound socketOnClose], [Function: onServerResponseClose] ],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 9,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: { next: null, entry: null, finish: [Function: bound onCorkedFinish] } },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: { request: [Function], connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: 
         TCP {
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::8080',
        [Symbol(IncomingMessage)]: 
         { [Function: IncomingMessage]
           super_: 
            { [Function: Readable]
              ReadableState: [Function: ReadableState],
              super_: 
               { [Function: Stream]
                 super_: [Object],
                 Readable: [Circular],
                 Writable: [Object],
                 Duplex: [Object],
                 Transform: [Object],
                 PassThrough: [Object],
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
              _fromList: [Function: fromList] } },
        [Symbol(ServerResponse)]: 
         { [Function: ServerResponse]
           super_: 
            { [Function: OutgoingMessage]
              super_: 
               { [Function: Stream]
                 super_: [Object],
                 Readable: [Object],
                 Writable: [Object],
                 Duplex: [Object],
                 Transform: [Object],
                 PassThrough: [Object],
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
        [Symbol(asyncId)]: 6 },
     _server: 
      Server {
        domain: null,
        _events: { request: [Function], connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: 
         TCP {
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::8080',
        [Symbol(IncomingMessage)]: 
         { [Function: IncomingMessage]
           super_: 
            { [Function: Readable]
              ReadableState: [Function: ReadableState],
              super_: 
               { [Function: Stream]
                 super_: [Object],
                 Readable: [Circular],
                 Writable: [Object],
                 Duplex: [Object],
                 Transform: [Object],
                 PassThrough: [Object],
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
              _fromList: [Function: fromList] } },
        [Symbol(ServerResponse)]: 
         { [Function: ServerResponse]
           super_: 
            { [Function: OutgoingMessage]
              super_: 
               { [Function: Stream]
                 super_: [Object],
                 Readable: [Object],
                 Writable: [Object],
                 Duplex: [Object],
                 Transform: [Object],
                 PassThrough: [Object],
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
        [Symbol(asyncId)]: 6 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: 
         Socket {
           connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0,
              _consumed: true },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: [ [Object], [Function: bound socketOnEnd] ],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
              timeout: [Function: socketOnTimeout],
              data: [Function: bound socketOnData],
              error: [Function: socketOnError],
              close: [Function: bound socketOnClose],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 9,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: { next: null, entry: null, finish: [Function: bound onCorkedFinish] } },
           writable: true,
           allowHalfOpen: true,
           _bytesDispatched: 0,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: { request: [Function], connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 2,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(IncomingMessage)]: { [Function: IncomingMessage] super_: [Object] },
              [Symbol(ServerResponse)]: { [Function: ServerResponse] super_: [Object] },
              [Symbol(asyncId)]: 6 },
           _server: 
            Server {
              domain: null,
              _events: { request: [Function], connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 2,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(IncomingMessage)]: { [Function: IncomingMessage] super_: [Object] },
              [Symbol(ServerResponse)]: { [Function: ServerResponse] super_: [Object] },
              [Symbol(asyncId)]: 6 },
           _idleTimeout: 120000,
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _idleStart: 7839,
           _destroyed: false,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: bound onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: null,
              outgoing: null,
              maxHeaderPairs: 2000,
              onIncoming: [Function: bound parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           [Symbol(asyncId)]: 16,
           [Symbol(bytesRead)]: 0,
           [Symbol(asyncId)]: 17,
           [Symbol(triggerAsyncId)]: 16 },
        _idlePrev: [Circular],
        _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: bound onceWrapper] listener: [Function: onend] },
              [Function: bound socketOnEnd] ],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close: [Function: bound socketOnClose],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 9,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: { next: null, entry: null, finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: { request: [Function], connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 2,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(IncomingMessage)]: 
            { [Function: IncomingMessage]
              super_: 
               { [Function: Readable]
                 ReadableState: [Function: ReadableState],
                 super_: [Object],
                 _fromList: [Function: fromList] } },
           [Symbol(ServerResponse)]: { [Function: ServerResponse] super_: { [Function: OutgoingMessage] super_: [Object] } },
           [Symbol(asyncId)]: 6 },
        _server: 
         Server {
           domain: null,
           _events: { request: [Function], connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 2,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(IncomingMessage)]: 
            { [Function: IncomingMessage]
              super_: 
               { [Function: Readable]
                 ReadableState: [Function: ReadableState],
                 super_: [Object],
                 _fromList: [Function: fromList] } },
           [Symbol(ServerResponse)]: { [Function: ServerResponse] super_: { [Function: OutgoingMessage] super_: [Object] } },
           [Symbol(asyncId)]: 6 },
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 7839,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: null,
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        [Symbol(asyncId)]: 16,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 17,
        [Symbol(triggerAsyncId)]: 16 },
     _idleStart: 7837,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: 
         IncomingMessage {
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: false,
              sync: true,
              needReadable: false,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: true,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: {},
           _eventsCount: 0,
           _maxListeners: undefined,
           socket: [Circular],
           connection: [Circular],
           httpVersionMajor: 1,
           httpVersionMinor: 1,
           httpVersion: '1.1',
           complete: false,
           headers: 
            { host: 'localhost:8080',
              connection: 'keep-alive',
              'cache-control': 'max-age=0',
              'upgrade-insecure-requests': '1',
              'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
              accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
              'accept-encoding': 'gzip, deflate, br',
              'accept-language': 'en-IN,en-GB;q=0.9,en;q=0.8,hi-IN;q=0.7,hi;q=0.6,en-US;q=0.5' },
           rawHeaders: 
            [ 'Host',
              'localhost:8080',
              'Connection',
              'keep-alive',
              'Cache-Control',
              'max-age=0',
              'Upgrade-Insecure-Requests',
              '1',
              'User-Agent',
              'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
              'Accept',
              'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
              'Accept-Encoding',
              'gzip, deflate, br',
              'Accept-Language',
              'en-IN,en-GB;q=0.9,en;q=0.8,hi-IN;q=0.7,hi;q=0.6,en-US;q=0.5' ],
           trailers: {},
           rawTrailers: [],
           upgrade: false,
           url: '/file_server.js',
           method: 'GET',
           statusCode: null,
           statusMessage: null,
           client: [Circular],
           _consuming: false,
           _dumped: false },
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 10,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 12,
     [Symbol(triggerAsyncId)]: 10 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: 
         [ { [Function: bound onceWrapper] listener: [Function: onend] },
           [Function: bound socketOnEnd] ],
        _socketEnd: [Function: onSocketEnd],
        drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [ [Function: bound socketOnClose], [Function: onServerResponseClose] ],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 9,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: { next: null, entry: null, finish: [Function: bound onCorkedFinish] } },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: { request: [Function], connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: 
         TCP {
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::8080',
        [Symbol(IncomingMessage)]: 
         { [Function: IncomingMessage]
           super_: 
            { [Function: Readable]
              ReadableState: [Function: ReadableState],
              super_: 
               { [Function: Stream]
                 super_: [Object],
                 Readable: [Circular],
                 Writable: [Object],
                 Duplex: [Object],
                 Transform: [Object],
                 PassThrough: [Object],
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
              _fromList: [Function: fromList] } },
        [Symbol(ServerResponse)]: 
         { [Function: ServerResponse]
           super_: 
            { [Function: OutgoingMessage]
              super_: 
               { [Function: Stream]
                 super_: [Object],
                 Readable: [Object],
                 Writable: [Object],
                 Duplex: [Object],
                 Transform: [Object],
                 PassThrough: [Object],
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
        [Symbol(asyncId)]: 6 },
     _server: 
      Server {
        domain: null,
        _events: { request: [Function], connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: 
         TCP {
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::8080',
        [Symbol(IncomingMessage)]: 
         { [Function: IncomingMessage]
           super_: 
            { [Function: Readable]
              ReadableState: [Function: ReadableState],
              super_: 
               { [Function: Stream]
                 super_: [Object],
                 Readable: [Circular],
                 Writable: [Object],
                 Duplex: [Object],
                 Transform: [Object],
                 PassThrough: [Object],
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
              _fromList: [Function: fromList] } },
        [Symbol(ServerResponse)]: 
         { [Function: ServerResponse]
           super_: 
            { [Function: OutgoingMessage]
              super_: 
               { [Function: Stream]
                 super_: [Object],
                 Readable: [Object],
                 Writable: [Object],
                 Duplex: [Object],
                 Transform: [Object],
                 PassThrough: [Object],
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
        [Symbol(asyncId)]: 6 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: 
         Socket {
           connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0,
              _consumed: true },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: [ [Object], [Function: bound socketOnEnd] ],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
              timeout: [Function: socketOnTimeout],
              data: [Function: bound socketOnData],
              error: [Function: socketOnError],
              close: [Function: bound socketOnClose],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 9,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: { next: null, entry: null, finish: [Function: bound onCorkedFinish] } },
           writable: true,
           allowHalfOpen: true,
           _bytesDispatched: 0,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: { request: [Function], connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 2,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(IncomingMessage)]: { [Function: IncomingMessage] super_: [Object] },
              [Symbol(ServerResponse)]: { [Function: ServerResponse] super_: [Object] },
              [Symbol(asyncId)]: 6 },
           _server: 
            Server {
              domain: null,
              _events: { request: [Function], connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 2,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(IncomingMessage)]: { [Function: IncomingMessage] super_: [Object] },
              [Symbol(ServerResponse)]: { [Function: ServerResponse] super_: [Object] },
              [Symbol(asyncId)]: 6 },
           _idleTimeout: 120000,
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _idleStart: 7839,
           _destroyed: false,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: bound onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: null,
              outgoing: null,
              maxHeaderPairs: 2000,
              onIncoming: [Function: bound parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           [Symbol(asyncId)]: 16,
           [Symbol(bytesRead)]: 0,
           [Symbol(asyncId)]: 17,
           [Symbol(triggerAsyncId)]: 16 },
        _idlePrev: [Circular],
        _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: bound onceWrapper] listener: [Function: onend] },
              [Function: bound socketOnEnd] ],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close: [Function: bound socketOnClose],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 9,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: { next: null, entry: null, finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: { request: [Function], connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 2,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(IncomingMessage)]: 
            { [Function: IncomingMessage]
              super_: 
               { [Function: Readable]
                 ReadableState: [Function: ReadableState],
                 super_: [Object],
                 _fromList: [Function: fromList] } },
           [Symbol(ServerResponse)]: { [Function: ServerResponse] super_: { [Function: OutgoingMessage] super_: [Object] } },
           [Symbol(asyncId)]: 6 },
        _server: 
         Server {
           domain: null,
           _events: { request: [Function], connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 2,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(IncomingMessage)]: 
            { [Function: IncomingMessage]
              super_: 
               { [Function: Readable]
                 ReadableState: [Function: ReadableState],
                 super_: [Object],
                 _fromList: [Function: fromList] } },
           [Symbol(ServerResponse)]: { [Function: ServerResponse] super_: { [Function: OutgoingMessage] super_: [Object] } },
           [Symbol(asyncId)]: 6 },
        _idleTimeout: 120000,
        _idleNext: [Circular],
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 7839,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: null,
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        [Symbol(asyncId)]: 16,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 17,
        [Symbol(triggerAsyncId)]: 16 },
     _idleStart: 7837,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: 
         IncomingMessage {
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: false,
              sync: true,
              needReadable: false,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: true,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: {},
           _eventsCount: 0,
           _maxListeners: undefined,
           socket: [Circular],
           connection: [Circular],
           httpVersionMajor: 1,
           httpVersionMinor: 1,
           httpVersion: '1.1',
           complete: false,
           headers: 
            { host: 'localhost:8080',
              connection: 'keep-alive',
              'cache-control': 'max-age=0',
              'upgrade-insecure-requests': '1',
              'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
              accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
              'accept-encoding': 'gzip, deflate, br',
              'accept-language': 'en-IN,en-GB;q=0.9,en;q=0.8,hi-IN;q=0.7,hi;q=0.6,en-US;q=0.5' },
           rawHeaders: 
            [ 'Host',
              'localhost:8080',
              'Connection',
              'keep-alive',
              'Cache-Control',
              'max-age=0',
              'Upgrade-Insecure-Requests',
              '1',
              'User-Agent',
              'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
              'Accept',
              'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
              'Accept-Encoding',
              'gzip, deflate, br',
              'Accept-Language',
              'en-IN,en-GB;q=0.9,en;q=0.8,hi-IN;q=0.7,hi;q=0.6,en-US;q=0.5' ],
           trailers: {},
           rawTrailers: [],
           upgrade: false,
           url: '/file_server.js',
           method: 'GET',
           statusCode: null,
           statusMessage: null,
           client: [Circular],
           _consuming: false,
           _dumped: false },
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage: [Circular],
     [Symbol(asyncId)]: 10,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 12,
     [Symbol(triggerAsyncId)]: 10 },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  [Symbol(outHeadersKey)]: null }